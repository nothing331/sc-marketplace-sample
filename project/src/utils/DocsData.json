{
    "CLI":{
        "initial_setup":"",
        "insallation_guide":""
    },
    "SDK":{
        "initial_setup":"# Prerequisites\n\n## System Requirements\n\nReady to build amazing multiplatform apps? Let's get your system set up with the Salescode SDK! Here's what you need:\n\n### Flutter Installation\n\nThe Salescode SDK is powered by Flutter - Google's powerful framework for creating beautiful apps. To begin your journey:\n\n1. * Flutter SDK: Get the latest version of Flutter\n   - [Download Flutter SDK Here](https://flutter.dev/docs/get-started/install)\n   - Follow Flutter's friendly installation guide\n   - Run flutter doctor to make sure everything's perfect\n\n### Basic Setup Requirements\n\nJust a few more things to get you started:\n- Your favorite IDE (VS Code or Android Studio work great!)\n- Flutter and Dart plugins for your IDE\n- Platform-specific tools if you're building for iOS/Android\n\n---\n\n# Salescode SDK Documentation\n\n## Overview\n\nThink of Salescode SDK as your Swiss Army knife for app development. It's packed with powerful tools that make building great apps a breeze. Let's explore what's inside this treasure chest!\n\n## Core Features\n\n### 1. Generic Repository üì¶\n\nDatabase operations made delightfully simple:\n- Inspired by Spring Boot's JPA\n- Ready-to-use CRUD operations:\n  - Create: Add your data\n  - Read: Get what you need\n  - Update: Change things up\n  - Delete: Remove what's not needed\n- Less code, more functionality\n\n### 2. Standardized Response Structure üìã\n\nKeep your data organized:\n- One format to rule them all\n- Predictable responses every time\n- Clean, consistent data handling\n\n### 3. Database Services üóÑÔ∏è\n\nWe've got your data storage needs covered:\n- **For Web Apps: Lightning-fast Hive database\n  - Perfect for browser-based storage\n  - Smooth data handling\n- **For Mobile Apps*: Powerful ObjectBox\n  - Blazing-fast mobile performance\n  - Efficient data management\n\n### 4. Network Service üåê\n\nConnect to the world with ease:\n- All the HTTP methods you need (GET, POST, PUT, DELETE)\n- Smart type handling - your data, your way\n- Clean, simple API calls that just work\n\n### 5. Configuration Service ‚öôÔ∏è\n\nYour settings, when and where you need them:\n- Portal configurations at your fingertips\n- Change settings on the fly\n- No more hardcoded values!\n\n### 6. Error Logger üîç\n\nKeep track of what's happening in your app:\n- Multiple flavors to choose from:\n  - Slack: Get instant notifications\n  - Kibana: Powerful logging and visualization\n  - Firebase: Google's analytics powerhouse\n  - Bugsnag: Detailed error tracking\n- Know what's wrong before your users do\n\nThe Salescode SDK isn't just another tool - it's your partner in creating amazing applications. Each feature is designed to make your development journey smoother and more enjoyable. Happy coding! üöÄ",
        "insallation_guide":"# Getting Started with Salescode SDK\n\n## Initialization and Integration Guide\n\n### Package Structure üìÅ\n\nYour package should follow this structure for optimal organization:\n\n\nlib/\n‚îú‚îÄ‚îÄ models/\n‚îÇ   ‚îî‚îÄ‚îÄ [module_name]_ui.dart\n‚îú‚îÄ‚îÄ repositories/              # Optional - for custom functions\n‚îÇ   ‚îú‚îÄ‚îÄ [module_name]_repository.dart\n‚îÇ   ‚îú‚îÄ‚îÄ [module_name]_repository_factory.dart\n‚îÇ   ‚îú‚îÄ‚îÄ [module_name]_repository_hive.dart\n‚îÇ   ‚îî‚îÄ‚îÄ [module_name]_repository_objectbox.dart\n‚îú‚îÄ‚îÄ services/\n‚îÇ   ‚îî‚îÄ‚îÄ [module_name]_service.dart\n‚îú‚îÄ‚îÄ [module_name]_bootstrap.dart\n‚îî‚îÄ‚îÄ [module_name].dart\n\n\n### SDK Provided Components üéÅ\n\nThe SDK provides several base classes and interfaces:\n\n1. *Bootstrap Interface:\ndart\n// Provided by SDK\nabstract class Bootstrap {\n  Future<void> init();\n}\n\n\n2. **Service Base Class:\ndart\n// Provided by SDK\nabstract class Service {\n  String get serviceName;\n}\n\n\n3. **Repository Interfaces:\ndart\n// Provided by SDK\nabstract class RepositoryFactory<T> {\n  T getRepository();\n}\n\nabstract class GenericRepository<T> {\n  // CRUD operations\n}\n\n\n4. **Package Response*:\ndart\n// Provided by SDK\nclass PackageResponse<T> {\n  final T? data;\n  final PackageResponseStatus status;\n  final String? message;\n}\n\n\n### Repository Structure üèóÔ∏è\n\nHere's how to implement your custom repository:\n\ndart\n// 1. Define Repository Interface\nabstract class ModuleRepository {\n  // Your custom methods here\n}\n\n// 2. Implement ObjectBox Version\nclass ModuleRepositoryObjectbox implements ModuleRepository {\n  // Implementation for ObjectBox\n}\n\n// 3. Implement Hive Version\nclass ModuleRepositoryHive implements ModuleRepository {\n  // Implementation for Hive\n}\n\n// 4. Create Factory\nclass ModuleRepositoryFactory implements RepositoryFactory<ModuleRepository> {\n  @override\n  ModuleRepository getRepository() {\n    Env? env = Environment.getEnvironment();\n    switch (env.name) {\n      case \"objectbox\": {\n        return ModuleRepositoryObjectbox();\n      }\n      case \"hive\": {\n        return ModuleRepositoryHive();\n      }\n      default: {\n        throw Error();\n      }\n    }\n  }\n}\n\n\n### Bootstrap Setup üöÄ\n\nThe bootstrap file uses SDK's Bootstrap interface:\n\ndart\n// Import from SDK\nimport 'package:salescode_sdk/bootstrap.dart';\n\nclass ModuleBootstrap implements Bootstrap {\n  @override\n  Future<void> init() async {\n    SampleService sampleService = SampleService();\n    ServiceRegistry.registerService<SampleService>(\n        sampleService.serviceName, sampleService);\n  }\n}\n\n\n### Service Creation üõ†Ô∏è\n\nServices extend SDK's base Service class:\n\ndart\n// Import from SDK\nimport 'package:salescode_sdk/service.dart';\n\nclass SampleService extends Service {\n  @override\n  String get serviceName => \"SampleService\";\n  \n  late SampleCustomRepository customRepo;\n  \n  SampleService() {\n    customRepo = SampleCustomRepositoryFactory().getRepository();\n  }\n\n  Future<PackageResponse<T>> accessConfigDictonary() async {\n    // Use SDK's generic repository\n    GenricRepositoryService<U> genricRepository = GenricRepositoryService<U>({name_of_your_model});\n    List<U> yourUiModelList = genricRepository.getAll();\n  }\n}\n\n\n### Using SDK Services üîÑ\n\ndart\n// ServiceRegistry is provided by SDK\nModuleService moduleService = ServiceRegistry.getService<ModuleService>(\"ModuleService\");\n\n// Use SDK's configuration service\nConfigurationService configService = ServiceRegistry.getService<ConfigurationService>(\"ConfigurationService\");\n\n// Use SDK's network service\nNetworkService networkService = ServiceRegistry.getService<NetworkService>(\"NetworkService\");\n\n\n### Package Response Handling üì¶\n\nUsing SDK's PackageResponse class:\n\ndart\nFuture<PackageResponse<List<String>>> fetchData() async {\n  try {\n    if (success) {\n      return PackageResponse(\n        data: data,\n        status: PackageResponseStatus.success,\n        message: \"Data fetched successfully.\",\n      );\n    } else {\n      return PackageResponse(\n        data: data,\n        status: PackageResponseStatus.failure,\n      );\n    }\n  } on PackagerResponseException catch (e) {\n    print(\"Known error: ${e.message}, Status: ${e.status}\");\n    throw e;\n  } catch (e) {\n    print(\"Unexpected error: $e\");\n    throw Exception(\"An unexpected error occurred\");\n  }\n}\n\nvoid handleResponse() async {\n  try {\n    final response = await fetchData();\n    if (response.status == PackageResponseStatus.success) {\n      print(\"Success: ${response.data}\");\n    } else {\n      print(\"Failure: ${response.message}\");\n    }\n  } catch (e) {\n    print(\"Error occurred: $e\");\n  }\n}\n\n\n## SDK Provided Features Summary üìã\n\nThe SDK provides:\n- Bootstrap interface and implementation\n- Service base classes and registry\n- Generic repository interfaces and implementations\n- Environment management\n- Package response structure\n- Database implementations (Hive/ObjectBox)\n- Network service\n- Configuration service\n- Error logging service\n- Type-safe service registry\n\n## Pro Tips üí°\n\n1. Utilize SDK's generic repository for standard CRUD operations\n2. Let the SDK handle database selection based on platform\n3. Use SDK's service registry for dependency injection\n4. Leverage SDK's package response for consistent error handling\n5. Follow the repository pattern for custom database operations\n\nRemember: Most of the heavy lifting is done by the SDK - you just need to implement your specific business logic!"
    }
}